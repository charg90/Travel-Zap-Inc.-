stages:
  - build
  - test
  - package
  - deploy

default:
  image: node:20-alpine

variables:
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA

# --- BUILD Stage Jobs ---
install_and_build:
  stage: build
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push
  artifacts:
    paths:
      - node_modules/
      - dist/
    expire_in: 1 day

# --- TEST Stage Jobs ---
lint_code:
  stage: test
  script:
    - npm run lint
  needs: ['install_and_build']
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull

run_unit_tests:
  stage: test
  script:
    - npm test
  needs: ['install_and_build']
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  artifacts:
    reports:
      junit:
        - coverage/junit.xml # Ensure your Jest config generates this report
    when: always
    expire_in: 1 day
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# --- PACKAGE Stage Jobs ---
build_docker_image:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  # Now only depends on unit tests, as e2e_tests stage is removed
  needs: ['run_unit_tests']
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''

# --- DEPLOY Stage Jobs ---

deploy_staging:
  stage: deploy
  image: alpine/git # Or your specific deployment tool image (kubectl, aws-cli, etc.)
  script:
    - echo "Deploying Docker image $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG to Staging..."
    # Replace with your actual staging deployment logic

  environment:
    name: staging
    url: https://staging.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  needs: ['build_docker_image']
  # Optional: Run database migrations on the target environment
  # before_script:
  #   - # Setup DB access for staging
  #   - npm run migration:run

deploy_production:
  stage: deploy
  image: alpine/git # Or your specific deployment tool image
  script:
    - echo "Deploying Docker image $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG to Production..."
    # Replace with your actual production deployment logic
  environment:
    name: production
    url: https://www.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  needs: ['deploy_staging']
  # protected: true # Uncomment and configure in GitLab for extra security
  # allow_failure: false # Ensures pipeline fails if production deploy fails
  # Optional: Run database migrations on the target environment
  # before_script:
  #   - # Setup DB access for production
  #   - npm run migration:run
